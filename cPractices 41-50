/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX 256

void function41(){
    int numArr[5];
    int i,a,b,c;
    printf("Write a program to find all unique triplets that sums up to zero\n");
    printf("Enter five elements that should be in the array\n");
    for (i=0;i<5;i++){
        scanf("%d",&numArr[i]);
    }
    for (a=0;a<3;a++){
        for (b=a+1;b<4;b++){
            for (c=b+1;c<5;c++){
                if (numArr[a]+numArr[b]+numArr[c]==0){
                    printf("The numbers %d, %d, and %d sums up to 0\n",numArr[a],numArr[b],numArr[c]);
                }
            }
        }
    }
}
void function42(){
    int numArr[5];
    int cntArr[5]={-1,-1,-1,-1,-1}; //initialization
    int i,a,b,c;
    printf("Write a program to remove the duplicates from a given array of integers\n");
    printf("Enter 5 numbers that should be in the array\n");
    for (i=0;i<5;i++){
        scanf("%d",&numArr[i]);
    }
    for (a=0;a<5;a++){
        int cnt=1;
        for (b=a+1;b<5;b++){
            if (numArr[a]==numArr[b]){
                cnt++;
                cntArr[b]=0;
            }
        }
        if (cntArr[a]!=0){
            cntArr[a]=cnt;
        }
    }
    //numArr=[1,2,2,3,4] -> cntArr=[1,2,0,1,1]
    for (c=0;c<5;c++){
        if (cntArr[c]!=0){
            printf("%d ",numArr[c]);
        }
    }
}
struct node{
    int data;
    struct node *next;
};

struct node *head; //NULL 값을 data로 가지고 있는 첫 노드 생성. 
void beginsert(int item){
    struct node *ptr=(struct node *)malloc(sizeof(struct node *));//newNode creation
    if (ptr==NULL){
        ptr->next=NULL;
        head=ptr; //비어있는 첫 노드를 갖고 있는 연결리스트.
    }
    else{
        ptr->data=item;
        ptr->next=head;
        head=ptr;
    }
}
void lastinsert(int item){
    struct node *ptr=(struct node *)malloc(sizeof(struct node *));//newNode creation
    struct node *temp; //check current node
    if (ptr==NULL){
        printf("not working\n");
    }
    else{
        ptr->data=item;
        if (head==NULL){
            ptr->next=NULL;
            head=ptr;
        }
        else{
            temp=head;
            while (temp->next!=NULL){
                temp=temp->next;
            }
            temp->next=ptr;
            ptr->next=NULL;
        }
    }
}
void display(){
    struct node *ptr;
    ptr=head;
    if (ptr==NULL){
        printf("nothing to print\n");
    }
    else{
        while (ptr!=NULL){
            printf("%d ",ptr->data);
            ptr=ptr->next;
        }
    }
}
void search(int item){
    //searching 대상: item
    struct node *ptr;
    ptr=head;
    int found=0; //못 찾았음을 전제로
    if (ptr==NULL){
        printf("No elements in the list\n");
    }
    else{
        while (ptr!=NULL && found!=1){
            if (ptr->data==item){
                found=1;
                break;
            }
            else{
                ptr=ptr->next;
            }
        }
    }
    if (found==1){
        printf("Item in the list\n");
    }
    else{
        printf("Item not in list\n");
    }
}
void delete(struct node *head, int item){
    struct node *ptr, *prev;
    ptr=head;
    int found=0;
    if (ptr==NULL){
        printf("No element to delete\n");
    }
    else{
        //item이 있나 없나 searching
        while (ptr!=NULL){
            if (ptr->data==item){
                found=1;
                break;
            }
            else{
                prev=ptr;
                ptr=ptr->next;
            }
        }
        if (found==0){
            printf("Item not in list\n");
        }
        else{
            prev->next=ptr->next;
        }
    }
}

void function43to48(){
    /*간단한 방법, insertFront를 하든 insertEnd를 하든 struct node *ptr을 매 함수에 넣어줌으로써
    new node formation을 한다. struct node *head는 첫 노드로써 전역변수로 가장 위에 선언해준다*/

    int item1,item2,item3,item4;
    printf("Enter the item in which you want to insert in the front\n");
    scanf("%d",&item1);
    beginsert(item1);
    printf("Enter another item in which you want to insert in the front\n");
    scanf("%d",&item3);
    beginsert(item3);
    printf("Enter the item in which you want to insert at the end\n");
    scanf("%d",&item2);
    lastinsert(item2);
    display();
    printf("\n");
    printf("Check if the following item 4 is in the list\n");
    search(4);
    printf("Enter the item in which you want to delete\n");
    scanf("%d",&item4);
    delete(head,item4); //traversal
    display();
}
void function49(){
    int character=0;
    int word=0;
    char ch;
    FILE *fp;
    fp=fopen("open.txt","r");
    while ((ch=fgets(fp)!=EOF){
        character++;
        if (ch==' '){
            word++;
        }
    }
	printf("The number of characters in this file is %d\n",character);
	printf("The number of words in this file is %d",word);
	fclose(fp);
}
void function50(void){
    FILE *fp1, *fp2;
    int lnum,lineCount=0;
    char newline[MAX],string[MAX];
    char ch;
	
    fp1=fopen("story.txt","r");
    fp2=fopen("newStory.txt","w");
    printf("Enter your new input line(to replace): ");
    fgets(newline,MAX,stdin);
    printf("Enter the line number of the line you want to replace: ");
    scanf("%d",&lnum);
    while (!feof(fp1)){
	strcpy(string,"\0");
	fgets(string,MAX,fp1);
	if (!feof(fp1)){
	    lineCount++;
	    if (lineCount!=lnum){
		fprintf(fp2,"%s",string);
	    }
	    else{
		fprintf(fp2,"%s",newline);
	    }
	}
    }
	
    fclose(fp1);
    fclose(fp2);
    remove("story.txt");
    rename("newStory.txt","story.txt");
    return 0;
} 
int main()
{
    //function41();
    //function42();
    //function43to48();
    //function49();
    function50();
}



